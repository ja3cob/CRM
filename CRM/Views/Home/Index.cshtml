@model CRM.Models.General.Month
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    ViewData["Title"] = "Home Page";
    var prevMonth = @Model.Date.AddMonths(-1);
    var nextMonth = @Model.Date.AddMonths(1);
}

<div class="tasks-container">
    <div class="tasks-calendar">
        <div class="tasks-calendar-header">
            <div class="tasks-calendar-buttons">
                <btn class="btn btn-arrow arrow-left btn--outline" onclick="changeMonth(-1)">&larr;</btn>
                <btn class="btn btn-arrow arrow-right btn--outline" onclick="changeMonth(1)">&rarr;</btn>
            </div>
            <h1 class="calendar-title"></h1>
        </div>
        <table class="calendar">
            <thead>
                <tr>
                    <td>Pon</td>
                    <td>Wt</td>
                    <td>Śr</td>
                    <td>Czw</td>
                    <td>Pt</td>
                    <td>Sob</td>
                    <td>Nd</td>
                </tr>
            </thead>
            <tbody class="calendar-body">
            </tbody>
        </table>
    </div>
    <section class="tasks-spikes"></section>
    <div class="tasks-controls">
        <div class="task-editor">
            <h1 class="task-editor-title">Edytuj / stwórz zadanie</h1>
            <form class="task-editor-form" action="">
                <input name="id" type="number" hidden />
                <div class="input-wrapper">
                    <input class="input-date" name="date" type="date" />
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <section class="time-range">
                        <input type="time" name="start-time"/>
                        <i class="fa-solid fa-minus"></i>
                        <input type="time" name="end-time"/>
                    </section>
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <textarea class="input-text" name="text" placeholder="Treść..."></textarea>
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <select class="select-assigned-person" name="assigned-person" onchange="updateSelect(this)">
                        <option value="default" selected disabled hidden>Przydzielony...</option>
                        <option>test</option>
                        <option>test</option>
                        <option>test</option>
                        <option>test</option>
                    </select>
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <div class="input-progress-wrapper">
                        <input class="input-progress" type="range" name="progress" min="0" max="100" step="10" value="0" oninput="updateProgressValue(this.value)" />
                        <span class="input-progress-value">0%</span>
                    </div>
                </div>
                <div class="task-editor-buttons">
                    <button class="btn btn--outline" type="button" onclick="clearEditor()">Wyczyść</button>
                    <button class="btn btn--primary" type="button" onclick="saveTask()">Zapisz</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles
{
    <link rel="stylesheet" href="~/css/Index.css"/>
    <link rel="stylesheet" href="~/css/PercentageCircle.css"/>
}

@section Scripts 
{
    <script src="~/js/Calendar.js"></script>
    <script src="~/js/MonthGenerator.js"></script>
    <script>
        loadCalendar();

        window.addEventListener('popstate', function (event) {
            loadCalendar();
        });

        function loadCalendar() {
            const currentDate = getCurrentDate();
            const calendar = document.querySelector(".calendar-body");
            calendar.innerHTML = '';

            const title = currentDate.toLocaleString('default', { month: 'long' }) + " " + currentDate.getFullYear().toString();
            document.querySelector(".calendar-title").innerHTML = title;

            loadDays(generateMonth(currentDate), calendar);
            loadToDoItems(currentDate);
        }
        function changeMonth(change) {
            const currentDate = getCurrentDate();
            currentDate.setMonth(currentDate.getMonth() + Number(change));

            history.pushState(currentDate, "", `/calendar?year=${currentDate.getFullYear()}&month=${currentDate.getMonth() + 1}`);
            loadCalendar();
        }

        function getInputs() {
            return {
                id: document.querySelector("input[name=id]"),
                date: document.querySelector(".input-date"),
                startTime: document.querySelector("input[name=start-time]"),
                endTime: document.querySelector("input[name=end-time]"),
                text: document.querySelector(".input-text"),
                assignedTo: document.querySelector(".select-assigned-person"),
                progress: document.querySelector(".input-progress")
            };
        }
        function populateEditor(item) {
            const inputs = getInputs();
            inputs.id.value = item.id;
            inputs.date.value = item.date;
            inputs.startTime.value = item.startTime;
            inputs.endTime.value = item.endTime;
            inputs.text.value = item.text;
            inputs.assignedTo.value = item.assignedToUsername;
            inputs.progress.value = item.progress;

            updateProgressValue(item.progress);
            updateSelect();
        }

        function updateSelect() {
            document.querySelector(".select-assigned-person").style.color = "black";
        }
        function saveTask() {
            const inputs = getInputs();
            postTask(inputs);
        }
        function displayTodoitemDetails(item) {
            const rect = item.getBoundingClientRect();
            const details = item.querySelector(".todoitems-item-details");
            if(details == undefined) { return; }

            details.style.left = (rect.left + item.offsetWidth + 2) + 'px';
            details.style.top = rect.top + 'px';
            details.classList.add("show");
        }
        function hideTodoitemDetails(item) {
            const details = item.querySelector(".todoitems-item-details");
            if (details == undefined) { return; }

            details.classList.remove("show");
        }
    </script>
}
