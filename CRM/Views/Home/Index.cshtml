@model CRM.Models.General.Month
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    ViewData["Title"] = "Home Page";
    var prevMonth = @Model.Date.AddMonths(-1);
    var nextMonth = @Model.Date.AddMonths(1);
}

<div class="tasks-container">
    <div class="tasks-calendar">
        <div class="tasks-calendar-header">
            <div class="tasks-calendar-buttons">
                <btn class="btn btn-arrow arrow-left btn--outline" onclick="changeMonth(-1)">&larr;</btn>
                <btn class="btn btn-arrow arrow-right btn--outline" onclick="changeMonth(1)">&rarr;</btn>
            </div>
            <h1 class="calendar-title">@Model.Date.ToString("MMMM") @Model.Date.Year</h1>
        </div>
        <table class="calendar">
            <thead>
                <tr>
                    <td>Pon</td>
                    <td>Wt</td>
                    <td>Śr</td>
                    <td>Czw</td>
                    <td>Pt</td>
                    <td>Sob</td>
                    <td>Nd</td>
                </tr>
            </thead>
            <tbody class="calendar-body">
            </tbody>
        </table>
    </div>
    <section class="tasks-spikes"></section>
    <div class="tasks-controls">
        <div class="task-editor">
            <h1 class="task-editor-title">Edytuj / stwórz zadanie</h1>
            <form class="task-editor-form" action="">
                <div class="input-wrapper">
                    <input class="input-date" name="date" type="date" />
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <section class="time-range">
                        <input type="time" name="start-time"/>
                        <i class="fa-solid fa-minus"></i>
                        <input type="time" name="end-time"/>
                    </section>
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <textarea class="input-text" name="text" placeholder="Treść..."></textarea>
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <select class="select-assigned-person" name="assigned-person" onchange="updateSelect(this)">
                        <option value="default" selected disabled hidden>Przydzielony...</option>
                        <option>test</option>
                        <option>test</option>
                        <option>test</option>
                        <option>test</option>
                    </select>
                    <div class="incorrect-input"><i class="fa-solid fa-xmark"></i></div>
                </div>
                <div class="input-wrapper">
                    <div class="input-progress-wrapper">
                        <input class="input-progress" type="range" name="progress" min="0" max="100" step="10" value="0" oninput="updateProgressValue(this.value)" />
                        <span class="input-progress-value">0%</span>
                    </div>
                </div>
                <div class="task-editor-buttons">
                    <button class="btn btn--outline" type="button" onclick="clearEditor()">Wyczyść</button>
                    <button class="btn btn--primary" type="button" onclick="saveTask()">Zapisz</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles
{
    <link rel="stylesheet" href="~/css/Index.css"/>
    <link rel="stylesheet" href="~/css/PercentageCircle.css"/>
}

@section Scripts 
{
    <script src="~/js/Calendar.js"></script>
    <script src="~/js/MonthGenerator.js"></script>
    <script>
        @*@for (int i = 0; i < Model.Days.Length; i++)
                {
                    @if(Model.Days[i].Date.DayOfWeek == DayOfWeek.Monday)
                    { 
                        @Html.Raw("<tr>"); 
                    }
                    <td>
                        <div class="calendar-day @(Model.Date.Month != Model.Days[i].Date.Month ? "different-month" : "")">
                            <p>@Model.Days[i].Date.Day</p>
                            <div class="todoitems">
                                @for(int j = 0; j < Model.Days[i].ToDoItems?.Count; j++)
                                {
                                    var item = Model.Days[i].ToDoItems[j];
                                    var itemJson = JsonConvert.SerializeObject(item, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                                    <div class="todoitems-item" onmouseover="displayTodoitemDetails(this)" onmouseout="hideTodoitemDetails(this)" onclick="populateEditor(@itemJson)">
                                        <p class="todoitems-item-time">
                                            @(item.StartTime.ToString("HH:mm") + " - " + item.EndTime.ToString("HH:mm"))
                                        </p>
                                        <p class="todoitems-item-text">
                                            @item.Text
                                        </p>
                                        @if (Model.Date.Month == Model.Days[i].Date.Month)
                                        {
                                        <div class="todoitems-item-details">
                                            <div class="todoitems-item-details-header">
                                                <span class="todoitems-item-details-time">@(item.StartTime.ToString("HH:mm") + " - " + item.EndTime.ToString("HH:mm"))</span>
                                                <div class="c100 @(Html.Raw("p") + item.Progress.ToString()) small">
                                                    <span>@item.Progress.ToString()%</span>
                                                    <div class="slice">
                                                        <div class="bar"></div>
                                                        <div class="fill"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <p class="todoitems-item-details-text">@item.Text</p>
                                            <p class="todoitems-item-details-assignedto">Przydzielony: @item.AssignedTo.Username</p>
                                            <p class="todoitems-item-details-createdby">Utworzył: @item.CreatedBy.Username</p>
                                        </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                    @if (Model.Days[i].Date.DayOfWeek == DayOfWeek.Sunday)
                    {
                        @Html.Raw("</tr>");
                    }
                }*@
        fillTable();
        function fillTable() {
            const urlParams = new URLSearchParams(window.location.search);
            const year = urlParams.get('year');
            console.log(year);
            loadCalendar(generateMonth(2023, 8), document.querySelector(".calendar-body"));

            loadToDoItems(2023, 8);
        }

        function getInputs() {
            return {
                date: document.querySelector(".input-date"),
                startTime: document.querySelector("input[name=start-time]"),
                endTime: document.querySelector("input[name=end-time]"),
                text: document.querySelector(".input-text"),
                assignedTo: document.querySelector(".select-assigned-person"),
                progress: document.querySelector(".input-progress")
            };
        }
        function populateEditor(item) {
            const inputs = getInputs();
            inputs.date.value = item.date;
            inputs.startTime.value = item.startTime;
            inputs.endTime.value = item.endTime;
            inputs.text.value = item.text;
            inputs.assignedTo.value = item.assignedTo.username;
            inputs.progress.value = item.progress;

            updateProgressValue(item.progress);
            updateSelect();
        }

        function updateSelect() {
            document.querySelector(".select-assigned-person").style.color = "black";
        }
        function updateProgressValue(progress) {
            document.querySelector(".input-progress-value").innerHTML = progress + '%';
        }
        function clearEditor() {
            const inputs = document.querySelectorAll(".task-editor-form input, .input-text");
            inputs.forEach(input => input.value = "");

            const assignedPerson = document.querySelector(".select-assigned-person");
            assignedPerson.value = "default";
            assignedPerson.style.color = "gray";

            const inputProgress = document.querySelector(".input-progress");
            inputProgress.value = 0;
            updateProgressValue(inputProgress.value);
        }
        function saveTask() {
            alert(document.querySelector(".task-editor-form [name=date]").value);
        }
        async function postDataUsingFetch() {
            fetch("/Home", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            })
            .then(async function (response) {
                if (response.ok) {
                    const data = await response.text();
                    console.log(data);
                } else {
                    console.error("Failed to post data.");
                }
            })
            .catch(function (error) {
                console.error("Error:", error);
            });
        }
        function displayTodoitemDetails(item) {
            const rect = item.getBoundingClientRect();
            const details = item.querySelector(".todoitems-item-details");
            if(details == undefined) { return; }

            details.style.left = (rect.left + item.offsetWidth + 2) + 'px';
            details.style.top = rect.top + 'px';
            details.classList.add("show");
            /*window.history.pushState("huh", "huh", "/huj");
            console.log(window.location);

            document.querySelector(".task-editor-form").querySelector(".input-wrapper").= 'hujj';*/
        }
        function hideTodoitemDetails(item) {
            const details = item.querySelector(".todoitems-item-details");
            if (details == undefined) { return; }

            details.classList.remove("show");
        }
    </script>
}
