@model CRM.Models.General.Month
@{
    ViewData["Title"] = "Home Page";
    var prevMonth = @Model.CurrentDate.AddMonths(-1);
    var nextMonth = @Model.CurrentDate.AddMonths(1);
}

<div class="tasks-container">
    <div class="tasks-calendar">
        <div class="tasks-calendar-header">
            <div class="tasks-calendar-buttons">
                <a class="btn btn-arrow arrow-left btn--outline" href="/calendar/@prevMonth.Year/@prevMonth.Month">&larr;</a>
                <a class="btn btn-arrow arrow-right btn--outline" href="/calendar/@nextMonth.Year/@nextMonth.Month">&rarr;</a>
            </div>
            <h1 class="calendar-title">@Model.CurrentDate.ToString("MMMM").ToUpper() @Model.CurrentDate.Year</h1>
        </div>
        <table class="calendar">
            <thead>
                <tr>
                    <td>Pon</td>
                    <td>Wt</td>
                    <td>Śr</td>
                    <td>Czw</td>
                    <td>Pt</td>
                    <td>Sob</td>
                    <td>Nd</td>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Days.Length; i++)
                {
                    @if(Model.Days[i].CurrentDate.DayOfWeek == DayOfWeek.Monday)
                    { 
                        @Html.Raw("<tr>"); 
                    }
                    <td>
                        <div @(Model.CurrentDate.Month != Model.Days[i].CurrentDate.Month ? "class=different-month" : "")>
                            <p>@Model.Days[i].CurrentDate.Day</p>
                            <div class="todoitems">
                                @for(int j = 0; j < Model.Days[i].ToDoItems?.Count; j++)
                                {
                                    var item = Model.Days[i].ToDoItems[j];
                                    <div class="todoitems-item" onmouseover="displayTodoitemDetails(this)" onmouseout="hideTodoitemDetails(this)">
                                        <p class="todoitems-item-time">
                                            @(item.StartTime.ToString("HH:mm") + " - " + item.EndTime.ToString("HH:mm"))
                                        </p>
                                        <p class="todoitems-item-text">
                                            @item.Text
                                        </p>
                                        @if (Model.CurrentDate.Month == Model.Days[i].CurrentDate.Month)
                                        {
                                        <div class="todoitems-item-details">
                                            <div class="todoitems-item-details-header">
                                                <span class="todoitems-item-details-time">@(item.StartTime.ToString("HH:mm") + " - " + item.EndTime.ToString("HH:mm"))</span>
                                                <div class="c100 @(Html.Raw("p") + item.Progress.ToString()) small">
                                                    <span>@item.Progress.ToString()%</span>
                                                    <div class="slice">
                                                        <div class="bar"></div>
                                                        <div class="fill"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <p class="todoitems-item-details-text">@item.Text</p>
                                            <p class="todoitems-item-details-assignedto">Przydzielony: @item.AssignedTo.Username</p>
                                            <p class="todoitems-item-details-createdby">Utworzył: @item.CreatedBy.Username</p>
                                        </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                    @if (Model.Days[i].CurrentDate.DayOfWeek == DayOfWeek.Sunday)
                    {
                        @Html.Raw("</tr>");
                    }
                }
            </tbody>
        </table>
    </div>
    <section class="tasks-spikes"></section>
    <div class="tasks-controls">
        <div class="task-editor">
            <h1 class="task-editor-title">Edytuj / stwórz zadanie</h1>
            <form class="task-editor-form" action="">
                <div class="input-wrapper">
                    <input class="input-date" name="date" type="date" />
                    <div class="incorrect-input"></div>
                </div>
                <div class="input-wrapper">
                    <section class="time-range">
                        <input type="time" name="start-time"/>
                         - 
                        <input type="time" name="end-time"/>
                    </section>
                    <div class="incorrect-input"></div>
                </div>
                <div class="input-wrapper">
                    <textarea class="input-text" name="text"></textarea>
                    <div class="incorrect-input"></div>
                </div>
                <div class="input-wrapper">
                    <select name="assigned-person">

                    </select>
                    <div class="incorrect-input"></div>
                </div>
                <button type="button" onclick="saveTask()" style="width: 60px; height: 20px;"></button>
            </form>
        </div>
    </div>
</div>

@section Styles
{
    <link rel="stylesheet" href="~/css/Index.css"/>
    <link rel="stylesheet" href="~/css/PercentageCircle.css"/>
}

@section Scripts 
{
    <script>
        async function postDataUsingFetch() {
            fetch("/Home", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            })
            .then(async function (response) {
                if (response.ok) {
                    const data = await response.text();
                    console.log(data);
                } else {
                    console.error("Failed to post data.");
                }
            })
            .catch(function (error) {
                console.error("Error:", error);
            });
        }
        function displayTodoitemDetails(item) {
            const rect = item.getBoundingClientRect();
            const details = item.querySelector(".todoitems-item-details");
            if(details == undefined) { return; }

            details.style.left = (rect.left + item.offsetWidth + 2) + 'px';
            details.style.top = rect.top + 'px';
            details.classList.add("show");
        }
        function hideTodoitemDetails(item) {
            const details = item.querySelector(".todoitems-item-details");
            if (details == undefined) { return; }

            details.classList.remove("show");
        }
    </script>
}
